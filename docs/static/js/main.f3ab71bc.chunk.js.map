{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAiB5C,OACQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACTC,EADS,iDACwCC,UAAUH,GADlD,8DAEGI,MAAOF,GAFV,cAETG,EAFS,gBAGMA,EAAIC,OAHV,uBAGRC,EAHQ,EAGRA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAXG,kBAYRA,GAZQ,4CAAH,sDCEPS,EAAc,SAAC,GAAiB,IAAhBL,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCFJS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAsBxC,OAbAC,qBAAW,WACP1B,EAAQC,GACP0B,MAAM,SAAAhB,GAECc,EAAS,CACLjB,KAAMG,EACNY,SAAS,SAItB,CAAEtB,IAGEuB,EDhBmBI,CAAc3B,GAAhCO,EAJ2B,EAI3BA,KAAMe,EAJqB,EAIrBA,QAId,OACI,qCACI,6BAAKtB,IACHsB,GAAW,2CACT,qBAAKJ,UAAU,YAAf,SACA,6BAEQX,EAAKE,KAAK,SAACC,GAAD,OACN,cAAC,EAAD,eAEIA,GADGA,EAAIC,eElB1BiB,EAAe,WAAM,MAEM1C,mBAAS,CAAC,eAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAO9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAGQ4C,EAAWpB,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CAECA,SAAYA,GADPA,Y,MCdrC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f3ab71bc.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { PropTypes } from \"prop-types\";\r\nexport const AddCategory = ({setcategories}) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e)=> {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ){\r\n            //console.log('Submit hecho')\r\n            setcategories(cats=> [inputValue,...cats]);\r\n            setinputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={ handleInputChange }\r\n                />\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setcategories: PropTypes.func.isRequired     \r\n}\r\n","export const getGifs = async(category) => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=7&api_key=fvSxzToxU7Gm8QTMwty7H5IA70z8QZs6`;\r\n        const res = await fetch( url );\r\n        const {data} = await res.json();\r\n        const gifs = data.map( img => {\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n        console.log(gifs);\r\n        return gifs;\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    //console.log(id,title,url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {  } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    // const [images, setImages] = useState([]);\r\n    // //solo llama a la funcion cuando renderiza por primera vez \r\n\r\n    const { data, loading } = useFetchGifs( category );\r\n    //console.log(state)\r\n\r\n    //getGifs();\r\n    return (\r\n        <>\r\n            <h3>{category}</h3> \r\n            { loading && <p>Loading...</p> }\r\n                <div className='card-grid'>\r\n                <ol>\r\n                    {\r\n                        data.map( (img) => (\r\n                            <GifGridItem \r\n                            key = {img.id}\r\n                            {...img}\r\n                            \r\n                            />\r\n                        ))\r\n                    }\r\n                </ol>\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n\r\n\r\n    useEffect( ()=> {\r\n        getGifs(category)\r\n        .then( img => {\r\n            // setTimeout(() => {        \r\n                setstate({\r\n                    data: img,\r\n                    loading: false\r\n                });\r\n            // }, 3000);\r\n        });\r\n    }, [ category ]);\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['Ral Madrid','Barcelona','Chelsea','ManU']\r\n    const [categories, setcategories] = useState(['Ral Madrid'])\r\n    // const handleAdd = () =>{\r\n    //     //setcategories( [...categories,'Atleti'] );\r\n    //     setcategories(cats=> [...cats,'City']);\r\n    // }\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategories = {setcategories} />\r\n            <hr></hr>\r\n            <ol>\r\n                { \r\n                    //.map recibe dos elementos, indice y elemento\r\n                    categories.map( category => {\r\n                        return <GifGrid \r\n                                key={category}\r\n                                category = {category}\r\n                                />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}